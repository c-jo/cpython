import os
import sys
import swi

here = os.path.split(__file__)[0]
if not here:
    here = os.getcwd()

dry_run = False
verbose = False
keep_suffix = [ \
'Lib.test.test_importlib.namespace_pkgs.module_and_namespace_package.a_test/py',
]

os.system('X Wipe '+here+'.dist rf~c~v')

# Copy a file
def copy(src,dst,typ=None):
    if verbose:
        if typ is None:
            print('Copy {} -> {}'.format(src, dst))
        else:
            print("Copy {} -> {} ({:03x})".format(src, dst, typ))

    if dry_run:
        return

    swi.swi('OS_FSControl','issi',26,src,dst,0b01)

    if typ is not None:
        os.set_filetype(dst, typ)

# Strip a file
def strip(src,dst,typ=None):
    if verbose:
        if typ is None:
            print('Strip {} -> {}'.format(src, dst))
        else:
            print("Strip {} -> {} ({:x})".format(src, dst, typ))

    if dry_run:
        return

    if os.system('strip {} -s -o {}'.format(src,dst)) != 0:
        exit(1)

    if typ is not None:
        os.set_filetype(dst, typ)

# Copy a RISC OS application, handling things like _Run,feb for !Run (Obey)
def app_copy(src,dst):
    os.makedirs(dst)
    for path,dirs,files in os.walk(src):
        for file in files:
            src = os.path.join(path, file)

            if ',' in file:
                file,type = file.split(',')
                type = int(type, 16)
            else:
                type = None
            if file[0] == '_':
                file = '!'+file[1:]

            copy(src, os.path.join(dst,file), type)

python3_target = os.path.join(here, 'dist','Apps','Development','!Python3')

#app_copy(os.path.join(here, 'RISCOS', '_Python3'),
#         os.path.join(here, 'dist', python3_target)

app_copy(os.path.join(here, 'RISCOS', 'RiscPkg-38'),
         os.path.join(here, 'dist', 'RiscPkg'))

# Use a stripped version of the executable
os.makedirs(os.path.join(python3_target, 'Bin'))
strip(os.path.join(here,'python3'), os.path.join(python3_target,'Bin','python38'))

app_copy(os.path.join(here, 'RISCOS', '_Python3.Scripts'),
         os.path.join(python3_target,'Scripts'))

# Create lib dirs
os.makedirs(os.path.join(python3_target,'Python38','Lib','lib-dynload'))

#          EXT -> TYPE, STRIP, SUFFIX
ext_map = {'/py':(0xa73,False, ''),
           '/so':(0xa75,True,  ''),
           }

# The library
def lib_copy(srcdir,tgtroot,target):
    for path,dirs,files in os.walk(srcdir):
        if os.path.split(path)[1] == '__pycache__':
            continue

        rel = os.path.relpath(path, srcdir)
        tgtdir = tgtroot if rel == '' else os.path.join(tgtroot, rel)

        os.makedirs(os.path.join(target,tgtdir),exist_ok=True)

        for file in files:
            name, ext = os.path.splitext(file)
            if ext:
                if ext in ext_map:
                    src = os.path.join(path,   file)
                    dst = os.path.join(tgtdir, name)
                    typ,st,suf = ext_map[ext]
                    ks_check = src[src.find('Lib'):]

                    if ks_check in keep_suffix:
                        dst = os.path.join(tgtdir, name+ext)
                    if st:
                        strip(os.path.join(here, src),
                              os.path.join(here, target, dst+suf),typ)
                    else:
                        copy(os.path.join(here, src),
                             os.path.join(here, target, dst+suf),typ)
                else:
                    print(f'{ext} not in extension map')
                    copy(os.path.join(here, path, file),
                         os.path.join(here, target, tgtdir, file))
            else:
               src = os.path.join(here, path,   file)
               dst = os.path.join(here, target, tgtdir, file)
               copy(src,dst)

def untype_archives(path):
    for e in os.scandir(path):
        st = e.stat()
        if st.st_objtype == 3:
            if st.st_filetype != 0xffd:
                os.set_filetype(os.path.join(path, e.name), 0xffd)
        elif st.st_objtype == 2:
            untype_archives(os.path.join(path, e))

untype_archives(os.path.join(here,'Lib','test'))

lib_copy(os.path.join(here,'Lib'), 'Lib',
         os.path.join(python3_target,'Python38'))

lib_copy(os.path.join(here, 'build.lib_riscos-38'), 'Lib.lib-dynload',
         os.path.join(python3_target,'Python38'))

copy(os.path.join(here,'RISCOS', 'ReleaseNotes'),
     os.path.join(python3_target, 'Python38', 'ReleaseNotes'))